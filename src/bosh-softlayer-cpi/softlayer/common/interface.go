package common

import (
	bsldisk "bosh-softlayer-cpi/softlayer/disk"
	bslnetwork "bosh-softlayer-cpi/softlayer/networks"
	bslstem "bosh-softlayer-cpi/softlayer/stemcell"
)

type Environment map[string]interface{}

type Mount struct {
	PartitionPath string
	MountPoint    string
}

type FeatureOptions struct {
	DisableOsReload                  bool   `json:"disableOsReload"`
	EnablePool                       bool   `json:"enablePool"`
	ApiEndpoint                      string `json:"apiEndpoint"`
	ApiWaitTime                      int    `json:"apiWaitTime"`
	ApiRetryCount                    int    `json:"apiRetryCount"`
	CreateISCSIVolumeTimeout         int    `json:"createIscsiVolumeTimeout"`
	CreateISCSIVolumePollingInterval int    `json:"createIscsiVolumePollingInterval"`
}

type VMCloudProperties struct {
	VmNamePrefix      string `json:"vmNamePrefix,omitempty"`
	Domain            string `json:"domain,omitempty"`
	StartCpus         int    `json:"startCpus,omitempty"`
	MaxMemory         int    `json:"maxMemory,omitempty"`
	Datacenter        string `json:"datacenter"`
	EphemeralDiskSize int    `json:"ephemeralDiskSize,omitempty"`

	HourlyBillingFlag            bool `json:"hourlyBillingFlag,omitempty"`
	LocalDiskFlag                bool `json:"localDiskFlag,omitempty"`
	DedicatedAccountHostOnlyFlag bool `json:"dedicatedAccountHostOnlyFlag,omitempty"`
	PrivateNetworkOnlyFlag       bool `json:"privateNetworkOnlyFlag,omitempty"`

	DeployedByBoshCLI bool `json:"deployedByBoshcli,omitempty"`

	MaxNetworkSpeed int `json:"maxNetworkSpeed,omitempty"`
}

type VMMetadata map[string]interface{}

const EtcIscsidConfTemplate = `# Generated by bosh-agent
node.startup = automatic
node.session.auth.authmethod = CHAP
node.session.auth.username = {{.Username}}
node.session.auth.password = {{.Password}}
discovery.sendtargets.auth.authmethod = CHAP
discovery.sendtargets.auth.username = {{.Username}}
discovery.sendtargets.auth.password = {{.Password}}
node.session.timeo.replacement_timeout = 120
node.conn[0].timeo.login_timeout = 15
node.conn[0].timeo.logout_timeout = 15
node.conn[0].timeo.noop_out_interval = 10
node.conn[0].timeo.noop_out_timeout = 15
node.session.iscsi.InitialR2T = No
node.session.iscsi.ImmediateData = Yes
node.session.iscsi.FirstBurstLength = 262144
node.session.iscsi.MaxBurstLength = 16776192
node.conn[0].iscsi.MaxRecvDataSegmentLength = 65536
`

const (
	SOFTLAYER_VM_LOG_TAG         = "SoftLayerVM"
	ROOT_USER_NAME               = "root"
	SOFTLAYER_VM_CREATOR_LOG_TAG = "SoftLayerVMCreator"
)

//go:generate counterfeiter -o fakes/fake_vm.go . VM
type VM interface {
	AttachDisk(bsldisk.Disk) error

	ConfigureNetworksSettings(bslnetwork.Networks) error

	//specific to configuring network with modifying /etc/network/interfaces
	ConfigureNetworks(bslnetwork.Networks) (bslnetwork.Networks, error)

	DetachDisk(bsldisk.Disk) error
	DeleteAgentEnv() error

	GetDataCenter() *string
	GetPrimaryIP() *string
	GetPrimaryBackendIP() *string
	GetRootPassword() *string
	GetFullyQualifiedDomainName() *string

	ID() *int

	Reboot() error
	ReloadOS(bslstem.Stemcell) error

	SetMetadata(VMMetadata) error
	SetVcapPassword(string) error
	SetAgentEnvService(AgentEnvService) error

	UpdateAgentEnv(AgentEnv) error
}

//go:generate counterfeiter -o fakes/fake_vm_creator.go . VMCreator
type VMCreator interface {
	Create(string, bslstem.Stemcell, VMCloudProperties, bslnetwork.Networks, Environment) (VM, error)
	GetAgentOptions() AgentOptions
}

//go:generate counterfeiter -o fakes/fake_vm_deleter.go . VMDeleter
type VMDeleter interface {
	Delete(cid int) error
}

//go:generate counterfeiter -o fakes/fake_vm_finder.go . VMFinder
type VMFinder interface {
	Find(int) (VM, error)
}
